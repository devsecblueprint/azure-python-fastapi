jobs:
  - job: testing_phase
    displayName: "Run unit test"
    pool:
      vmImage: ubuntu-latest

      steps:
        - checkout: self
          displayName: "Checkout repo"

        - script: |
            echo "installing dependencies..."
            pip install -r requirements.txt
          displayName: "Install dependencies"

        - script: |
            echo "running py tests..."
            pytest test/
          displayName: "Run python tests"

  - job: trivy_scan
    displayName: "Run Trivy security scanner against the image"
    pool:
      vmImage: ubuntu-latest

    steps:
      - checkout: self
        displayName: "Checkout repo"
      
      - script: |
          echo "Building Docker image..."
          docker build -t awesome-fastapi:$(Build.SourceVersion) .
        displayName: "Build Docker Image"
      
      - script: |
          docker run --rm \
            -v $(Build.SourcesDirectory):/app \
            aquasec/trivy:latest fs /app \
              --exit-code 1 \
              --severity HIGH,CRITICAL
        displayName: "Trivy scan source files"

  - job: owasp_zap_scan
    pool:
      vmImage: ubuntu-latest
    displayName: "Run OWASP ZAP security scanner"
    steps:
      - checkout: self
        displayName: "Checkout repo"

        # Build and Tag Image
        # Run Docker Image in detached mode
      - script: |
          echo "Building Docker image..."
          docker build -t awesome-fastapi:$(Build.SourceVersion) .
          docker run -d -p 8080:80 awesome-fastapi:$(Build.SourceVersion)
        displayName: "Build Docker Image"

      - script: sleep 30
        displayName: "Wait for Docker container to be ready"

      - script: docker ps
        displayName: "Confirm Docker container is running"
      
      - script: |
          mkdir -p "$(Build.SourcesDirectory)/zap-out"
          docker run --rm -t \
            -u 0:0 \
            -v "$(Build.SourcesDirectory)/zap-out:/zap/wrk:rw" \
            ghcr.io/zaproxy/zaproxy:stable \
            zap-full-scan.py -t "$(TargetUrl)" -r zap-report.html -x zap-report.xml
        displayName: "Run ZAP full scan"

      - task: PublishTestResults@2
        inputs:
          testResultsFormat: "NUnit"
          testResultsFiles: "**/zap-out/zap-report.xml"
          failIfNoTests: true
        displayName: "Publish OWASP ZAP Test Results"
