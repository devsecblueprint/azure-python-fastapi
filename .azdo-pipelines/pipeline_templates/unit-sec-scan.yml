jobs:
  - job: testing_phase
    displayName: "Run unit test"
    pool:
      vmImgae: ubuntu-latest

      steps:
        - checkout: self
          displayName: "Checkout repo"

        - script:
        - bash: |
            echo "installing dependencies..."
            pip install -r requirements.txt
          displayName: "Install dependencies"

        - script: echo "running py tests..."
            pytest test/
          displayName: "Run python tests"

  - job: trivy_scan
    displayName: "Run Trivy security scanner against the image"
    pool:
      vmImage: ubuntu-latest

      steps:
        - checkout: self
          displayName: "Checkout repo"

        - script: |
            echo "Building Docker image..."
            docker build -t awesome-fastapi:$(Build.SourceVersion).
          displayName: "Build Docker Image"

        - task: trivy@2
          inputs:
            version: "latest"
            type: "image"
            image: awesome-fastapi:$(Build.SourceVersion).
            severities: "HIGH, CRITICAL"
            reports: "sarif"
            publish: true
          displayName: "Run Trivy Vulnerability Scanner"
          env:
            GITHUB_TOKEN: $(GITHUB_TOKEN)

  - job: owasp_zap_scan
    pool:
      vmImage: ubuntu-latest
    displayName: "Run OWASP ZAP security scanner"
    steps:
      - checkout: self
        displayName: "Checkout repo"

        # Build and Tag Image
        # Run Docker Image in detached mode
      - script: |
          echo "Building Docker image..."
          docker build -t awesome-fastapi:$(Build.SourceVersion) .
          docker run -d -p 8080:80 awesome-fastapi:$(Build.SourceVersion) .
        displayName: "Build Docker Image"

      - script: sleep 30
        displayName: "Wait for Docker container to be ready"

      - script: docker ps
        displayName: "Confirm Docker container is running"
      - script: |
          docker run --rm -v $(System.DefaultWorkingDirectory):/zap/wrk/:rw \
          owasp/zap2docker-stable zap-full-scan.py \
          -t http://host.docker.internal:8080 \
          -x zap-report.xml \
          -r zap-report.html \
          || true
        displayName: "Run OWASP ZAP Security Scanner"
      ### work in progress
      #  - task: OwaspZapScan@0
      #     inputs:
      #       ZapApiUrl: 'http://localhost:$(ProxyPort)'
      #       TargetUrl: 'http://0.0.0.0:8080'
      #       NewContext: true
      #       zapImageName: 'awesome-fastapi:$(Build.SourceVersion) .'
      #       ShowContextListConfig: true
      #       ExecuteAjaxSpiderScan: true
      #       ExecuteSpiderScan: true
      #    displayName: 'Run OWASP ZAP Security Scanner
      - task: PublishTestResults@2
        inputs:
          testResultsFormat: "NUnit"
          testResultsFiles: "**/zap-full-scan.xml"
          failIfNoTests: true
        displayName: "Publish OWASP ZAP Test Results"
